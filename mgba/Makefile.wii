#---------------------------------------------------------------------------------
# Clear the implicit built in rules
#---------------------------------------------------------------------------------
.SUFFIXES:
#---------------------------------------------------------------------------------
ifeq ($(strip $(DEVKITPPC)),)
$(error "Please set DEVKITPPC in your environment. export DEVKITPPC=<path to>devkitPPC")
endif

include $(DEVKITPPC)/wii_rules

#---------------------------------------------------------------------------------
# TARGET is the name of the output
# BUILD is the directory where object files & intermediate files will be placed
# SOURCES is a list of directories containing source code
# INCLUDES is a list of directories containing extra header files
#---------------------------------------------------------------------------------
TARGET		:=	mgba
BUILD		:=	build_mgba
RAW2C		:= 	$(DEVKITPPC)/bin
SOURCES		:=	$(BUILD) \
                fonts \
				lang \
				src/arm \
				src/lr35902 \
				src/gba \
				src/gba/extra \
				src/gb \
				src/gb/extra \
				src/gb/renderers \
				src/gba/cheats \
				src/gba/rr \
				src/gba/supervisor \
				src/core \
				src/util \
                src/util/gui \
				src/util/guiGx \
				src/util/vfs \
				src/gba/renderers \
				src/gba/sio \
				src/feature \
				src/feature/gui \
				src/third-party/inih \
				src/third-party/blip_buf \
				src/third-party/lzma \
				src/third-party/zlib/contrib/minizip \
				src/platform/wii \
				src/platform/wii/CnFont
INCLUDES	:=  include \
                src  \
				src/util/guiGx \
                src/arm

#---------------------------------------------------------------------------------
# options for code generation
#---------------------------------------------------------------------------------
CFLAGS = -g -O2 -mrvl $(MACHDEP) $(INCLUDE) $(DEFS) -w -Wextra -std=c99 \
        -DM_CORE_GBA -DM_CORE_GB -DCOLOR_16_BIT -DCOLOR_5_6_5 -DUSE_VFS_FILE \
        -DRESAMPLE_LIBRARY=RESAMPLE_BLIP_BUF \
		-D__ATOMIC_RELEASE -D__ATOMIC_ACQUIRE -fasm -DUSE_PNG -DHAVE_LOCALTIME_R \
		-DUSE_LZMA -DUSE_ZLIB -DNOCRYPT -DIOAPI_NO_64

CXXFLAGS	=	$(CFLAGS)

LDFLAGS = -g $(MACHDEP) -mrvl -Wl,-Map,$(notdir $@).map -s

#---------------------------------------------------------------------------------
# any extra libraries we wish to link with the project
#---------------------------------------------------------------------------------
LIBS := -lpng -ldi -lfat -liso9660 -lasnd -lwiiuse -lbte -logc -lm -lz \
        -lmxml -lwupc -lvorbisidec -lfreetype -ltinysmb

#---------------------------------------------------------------------------------
# list of directories containing libraries, this must be the top level containing
# include and lib
#---------------------------------------------------------------------------------
LIBDIRS	:= $(PORTLIBS)

#---------------------------------------------------------------------------------
# no real need to edit anything past this point unless you need to add additional
# rules for different file extensions
#---------------------------------------------------------------------------------
ifneq ($(BUILD),$(notdir $(CURDIR)))
#---------------------------------------------------------------------------------

export OUTPUT	:=	$(CURDIR)/$(TARGET)

export VPATH	:=	$(foreach dir,$(SOURCES),$(CURDIR)/$(dir)) \
					$(foreach dir,$(DATA),$(CURDIR)/$(dir))

export DEPSDIR	:=	$(CURDIR)/$(BUILD)

#---------------------------------------------------------------------------------
# automatically build a list of object files for our project
#---------------------------------------------------------------------------------
TPLFILES	:=	$(foreach dir,$(SOURCES),$(notdir $(wildcard $(dir)/*.tpl)))
TTFFILES	:=	$(foreach dir,$(SOURCES),$(notdir $(wildcard $(dir)/*.ttf)))
LANGFILES	:=	$(foreach dir,$(SOURCES),$(notdir $(wildcard $(dir)/*.lang)))
CFILES		:=	$(foreach dir,$(SOURCES),$(notdir $(wildcard $(dir)/*.c)))
CPPFILES	:=	$(foreach dir,$(SOURCES),$(notdir $(wildcard $(dir)/*.cpp)))
sFILES		:=	$(foreach dir,$(SOURCES),$(notdir $(wildcard $(dir)/*.s)))
SFILES		:=	$(foreach dir,$(SOURCES),$(notdir $(wildcard $(dir)/*.S)))
datFILES	:=	$(foreach dir,$(SOURCES),$(notdir $(wildcard $(dir)/*.dat)))
BINFILES	:=	$(foreach dir,$(DATA),$(notdir $(wildcard $(dir)/*.*)))

#---------------------------------------------------------------------------------
# use CXX for linking C++ projects, CC for standard C
#---------------------------------------------------------------------------------
ifeq ($(strip $(CPPFILES)),)
	export LD	:=	$(CC)
else
	export LD	:=	$(CXX)
endif

export OFILES	:=	$(addsuffix .o,$(BINFILES)) \
                    $(TPLFILES:.tpl=.tpl.o) \
					$(datFILES:.dat=.dat.o) \
					$(TTFFILES:.ttf=.ttf.o) $(LANGFILES:.lang=.lang.o) \
					$(CPPFILES:.cpp=.o) $(CFILES:.c=.o) \
					$(sFILES:.s=.o) $(SFILES:.S=.o) 

#---------------------------------------------------------------------------------
# build a list of include paths
#---------------------------------------------------------------------------------
export INCLUDE	:=	$(foreach dir,$(INCLUDES),-I$(CURDIR)/$(dir)) \
			        $(foreach dir,$(LIBDIRS),-I$(dir)/include) \
			        -I$(CURDIR)/$(BUILD) \
			        -I$(LIBOGC_INC) \
					-I$(PORTLIBS)/include \
					-I$(PORTLIBS)/include/freetype2 \

#---------------------------------------------------------------------------------
# build a list of library paths
#---------------------------------------------------------------------------------
export LIBPATHS	:=	$(foreach dir,$(LIBDIRS),-L$(dir)/lib) \
					-L$(LIBOGC_LIB)

export OUTPUT	:=	$(CURDIR)/$(TARGET)
.PHONY: $(BUILD) clean

#---------------------------------------------------------------------------------
$(BUILD):
	@[ -d $@ ] || mkdir -p $@
	@make --no-print-directory -C $(BUILD) -f $(CURDIR)/Makefile.wii

#---------------------------------------------------------------------------------
clean:
	@echo clean ...
	@rm -fr $(BUILD) $(OUTPUT).elf $(OUTPUT).dol

#---------------------------------------------------------------------------------
else

DEPENDS	:=	$(OFILES:.o=.d)

#---------------------------------------------------------------------------------
# main targets
#---------------------------------------------------------------------------------
$(OUTPUT).dol: $(OUTPUT).elf
$(OUTPUT).elf: $(OFILES)

#---------------------------------------------------------------------------------
# This rule links in binary data with the .jpg extension
#---------------------------------------------------------------------------------
#%.jpg.o	:	%.jpg
#---------------------------------------------------------------------------------
%.dat.o : %.dat
	@echo $(notdir $<)
	$(bin2o)

%.tpl.o : %.tpl
	@echo $(notdir $<)
	$(bin2o)

%.ttf.o : %.ttf
	@echo $(notdir $<)
	$(bin2o)

%.lang.o : %.lang
	@echo $(notdir $<)
	$(bin2o)

-include $(DEPENDS)

#---------------------------------------------------------------------------------
endif
#---------------------------------------------------------------------------------
